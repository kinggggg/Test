# Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.
#

#\u96C6\u7FA4\u914D\u7F6E
#\u96C6\u7FA4\u73AF\u5883\u4E0B\u540C\u4E00\u4E2Aname
org.quartz.scheduler.instanceName= FireflyQuartzScheduler

#\u4E0D\u540C\u7684id
org.quartz.scheduler.instanceId:AUTO
#\u751F\u6210\u4E0A\u9762\u7684instanceId
org.quartz.scheduler.instanceIdGenerator.class:com.zeek.domain.quartz.QuartzInstanceIdGenerator
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 20000

#\u7EBF\u7A0B\u540D\u79F0\uFF0C\u9ED8\u8BA4\u662Finstancename+_QuartzSchedulerThread
#org.quartz.scheduler.threadName=HanukkahQuartzScheduler_QuartzSchedulerThread

#A Boolean value (true or false) that specifies whether the threads spawned by Quartz will inherit the context ClassLoader of the initializing thread (i.e., the thread that initializes the Quartz instance). This will affect Quartz main scheduling thread, JDBCJobStore\u2019s misfire handling thread (if JDBCJobStore is used), cluster recovery thread (if clustering is used), and threads in SimpleThreadPool (if SimpleThreadPool is used). Setting this value to true may help with class loading, JNDI look-ups, and other issues related to using Quartz within an application server.
#org.quartz.scheduler. threadsInheritContextClassLoaderOfInitializer:false

#The amount of time in milliseconds that the scheduler will wait before it re-queries for available triggers when the scheduler is otherwise idle. You should normally not have to adjust this parameter unless you're using XA transactions and are having problems with delayed firings of triggers that should fire immediately. Values less than 5000 ms are not recommended as it will cause excessive database querying. Values less than 1000 are not valid.
#org.quartz.scheduler.idleWaitTime:false

#The amount of time in milliseconds that the scheduler will wait between re-tries after it detects a loss of connectivity within the JobStore (i.e., to the database). This parameter is not meaningful when using RamJobStore.
#org.quartz.scheduler.dbFailureRetryInterval:15000

#A name-value pair that will be placed into the scheduler context as strings (see Scheduler.getContext()). For example, setting the org.quartz.context.key.MyKey to \u201CMyValue\u201D would perform the equivalent of scheduler.getContext().put("MyKey", "MyValue").
#org.quartz.context.key.HANUKKAH_KEY=HANUKKAH

org.quartz.scheduler.rmi.export: false
org.quartz.scheduler.rmi.proxy: false
org.quartz.scheduler.wrapJobExecutionInUserTransaction: false

org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount: 25
org.quartz.threadPool.threadPriority: 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true

org.quartz.jobStore.misfireThreshold: 60000

#============================================================================
# Configure JobStore
#============================================================================

#\u9ED8\u8BA4\u914D\u7F6E\uFF0C\u6570\u636E\u4FDD\u5B58\u5230\u5185\u5B58
#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStor
#\u6301\u4E45\u5316\u914D\u7F6E
org.quartz.jobStore.class:org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass:org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.useProperties:true
#\u6570\u636E\u5E93\u8868\u524D\u7F00
org.quartz.jobStore.tablePrefix:QRTZ_
#org.quartz.jobStore.dataSource =org.apache.tomcat.jdbc.pool.DataSource

org.quartz.jobStore.txIsolationLevelSerializable:true

#============================================================================
# Configure Datasources
#============================================================================
#JDBC\u9A71\u52A8
#org.quartz.dataSource.qzDS.driver:com.mysql.jdbc.Driver
#org.quartz.dataSource.qzDS.URL:jdbc:mysql://localhost:3306/hanukkah
#org.quartz.dataSource.qzDS.user:root
#org.quartz.dataSource.qzDS.password:
#org.quartz.dataSource.qzDS.maxConnection:100

